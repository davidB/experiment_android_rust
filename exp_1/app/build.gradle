apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

//    testOptions {
//        unitTests {
//            all {
//                // This is where we have access to the properties of gradle's Test class,
//                // look it  up if you want to customize more test parameters
//
//                // next we take our cmake output dir for whatever architecture
//                // you can also put some 3rd party libs here, or override
//                // the implicitly linked stuff (libc, libm and others)
//                systemProperty "java.library.path", "${project.projectDir}/${cargo.module}/target/${cargo.profile}"
//                environment 'LD_LIBRARY_PATH', "${project.projectDir}/${cargo.module}/target/${cargo.profile}"
//            }
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

// see https://github.com/mozilla/rust-android-gradle
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

def cratename = "rust"
cargo {
    module  = "../${cratename}"       // Or whatever directory contains your Cargo.toml
    libname = "${cratename}"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm", "x86", "darwin"] // "darwin" append to be able to run test on desktop mac OSX
//    rustup target add armv7-linux-androideabi   # for arm
//    rustup target add i686-linux-android        # for x86
//    rustup target add aarch64-linux-android     # for arm64
//    rustup target add x86_64-linux-android      # for x86_64
//    rustup target add x86_64-unknown-linux-gnu  # for linux-x86-64
//    rustup target add x86_64-apple-darwin       # for darwin (macOS)
//    rustup target add x86_64-pc-windows-gnu     # for win32-x86-64-gnu
//    rustup target add x86_64-pc-windows-msvc    # for win32-x86-64-msvc
}

preBuild.dependsOn "cargoBuild"
tasks.withType(Test) {
    systemProperty "java.library.path", "${project.projectDir}/${cargo.module}/target/${cargo.profile}"
//    environment 'LD_LIBRARY_PATH', "${project.projectDir}/${cargo.module}/target/${cargo.profile}"
}